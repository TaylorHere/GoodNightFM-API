错误编号：a9459ad9-d326-11e6-be2e-e0accb69b5d2
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>AttributeError: 'MetaData' object has no attribute 'name' // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 140012286607656,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "1SXkqPPQAJ5ZtSeM80Es";
    </script>
  </head>
  <body>
    <div class="debugger">
<h1>builtins.AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: 'MetaData' object has no attribute 'name'</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-140012286607712">
  <h4>File <cite class="filename">"/usr/local/lib/python3.5/site-packages/flask/app.py"</cite>,
      line <em class="line">2000</em>,
      in <code class="function">__call__</code></h4>
  <div class="source"><pre class="line before"><span class="ws">                </span>error = None</pre>
<pre class="line before"><span class="ws">            </span>ctx.auto_pop(error)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Shortcut for :attr:`wsgi_app`.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return '&lt;%s %r&gt;' % (</pre>
<pre class="line after"><span class="ws">            </span>self.__class__.__name__,</pre>
<pre class="line after"><span class="ws">            </span>self.name,</pre></div>
</div>

<li><div class="frame" id="frame-140012286607992">
  <h4>File <cite class="filename">"/usr/local/lib/python3.5/site-packages/flask/app.py"</cite>,
      line <em class="line">1991</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.make_response(self.handle_exception(e))</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>if self.should_ignore_error(error):</pre>
<pre class="line after"><span class="ws">                </span>error = None</pre>
<pre class="line after"><span class="ws">            </span>ctx.auto_pop(error)</pre></div>
</div>

<li><div class="frame" id="frame-140012286608048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.5/site-packages/flask/app.py"</cite>,
      line <em class="line">1567</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>if handler is None:</pre></div>
</div>

<li><div class="frame" id="frame-140012286608104">
  <h4>File <cite class="filename">"/usr/local/lib/python3.5/site-packages/flask/_compat.py"</cite>,
      line <em class="line">33</em>,
      in <code class="function">reraise</code></h4>
  <div class="source"><pre class="line before"><span class="ws">    </span>from io import StringIO</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>
<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>
<pre class="line before"><span class="ws">            </span>raise value.with_traceback(tb)</pre>
<pre class="line current"><span class="ws">        </span>raise value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>else:</pre>
<pre class="line after"><span class="ws">    </span>text_type = unicode</pre></div>
</div>

<li><div class="frame" id="frame-140012286607880">
  <h4>File <cite class="filename">"/usr/local/lib/python3.5/site-packages/flask/app.py"</cite>,
      line <em class="line">1988</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>ctx.push()</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.make_response(self.handle_exception(e))</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140012286608216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.5/site-packages/flask/app.py"</cite>,
      line <em class="line">1641</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">        </span>request_finished.send(self, response=response)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140012286608272">
  <h4>File <cite class="filename">"/usr/local/lib/python3.5/site-packages/flask/app.py"</cite>,
      line <em class="line">1544</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Default exception handling that kicks in when an exception</pre>
<pre class="line after"><span class="ws">        </span>occurs that is not caught.  In debug mode the exception will</pre></div>
</div>

<li><div class="frame" id="frame-140012286608328">
  <h4>File <cite class="filename">"/usr/local/lib/python3.5/site-packages/flask/_compat.py"</cite>,
      line <em class="line">33</em>,
      in <code class="function">reraise</code></h4>
  <div class="source"><pre class="line before"><span class="ws">    </span>from io import StringIO</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>
<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>
<pre class="line before"><span class="ws">            </span>raise value.with_traceback(tb)</pre>
<pre class="line current"><span class="ws">        </span>raise value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>else:</pre>
<pre class="line after"><span class="ws">    </span>text_type = unicode</pre></div>
</div>

<li><div class="frame" id="frame-140012286607936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.5/site-packages/flask/app.py"</cite>,
      line <em class="line">1639</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">        </span>request_finished.send(self, response=response)</pre></div>
</div>

<li><div class="frame" id="frame-140012286608440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.5/site-packages/flask/app.py"</cite>,
      line <em class="line">1625</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span># request came with the OPTIONS method, reply automatically</pre>
<pre class="line before"><span class="ws">        </span>if getattr(rule, 'provide_automatic_options', False) \</pre>
<pre class="line before"><span class="ws">           </span>and req.method == 'OPTIONS':</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140012286608496">
  <h4>File <cite class="filename">"/usr/local/lib/python3.5/site-packages/flask/views.py"</cite>,
      line <em class="line">84</em>,
      in <code class="function">view</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>The arguments passed to :meth:`as_view` are forwarded to the</pre>
<pre class="line before"><span class="ws">        </span>constructor of the class.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>def view(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>
<pre class="line current"><span class="ws">            </span>return self.dispatch_request(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if cls.decorators:</pre>
<pre class="line after"><span class="ws">            </span>view.__name__ = name</pre>
<pre class="line after"><span class="ws">            </span>view.__module__ = cls.__module__</pre>
<pre class="line after"><span class="ws">            </span>for decorator in cls.decorators:</pre></div>
</div>

<li><div class="frame" id="frame-140012286607824">
  <h4>File <cite class="filename">"/app/SinglePage/singlepage.py"</cite>,
      line <em class="line">116</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source"><pre class="line before"><span class="ws">                </span>try:</pre>
<pre class="line before"><span class="ws">                    </span>kwargs = {self.pk_list['put']: None}</pre>
<pre class="line before"><span class="ws">                </span>except KeyError as e:</pre>
<pre class="line before"><span class="ws">                    </span>pass</pre>
<pre class="line before"><span class="ws">            </span>response, class_type = self.put(*args, **kwargs)</pre>
<pre class="line current"><span class="ws">            </span>return self.json_response(response, class_type)</pre>
<pre class="line after"><span class="ws">        </span>elif request.method == 'DELETE':</pre>
<pre class="line after"><span class="ws">            </span>if kwargs == {}:</pre>
<pre class="line after"><span class="ws">                </span>try:</pre>
<pre class="line after"><span class="ws">                    </span>kwargs = {self.pk_list['delete']: None}</pre>
<pre class="line after"><span class="ws">                </span>except KeyError as e:</pre></div>
</div>

<li><div class="frame" id="frame-140012286608384">
  <h4>File <cite class="filename">"/app/SinglePage/singlepage.py"</cite>,
      line <em class="line">76</em>,
      in <code class="function">json_response</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>return self</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def json_response(self, response, class_type):</pre>
<pre class="line before"><span class="ws">        </span>serializer = Serializer()</pre>
<pre class="line before"><span class="ws">        </span>serializer.class_type = class_type</pre>
<pre class="line current"><span class="ws">        </span>serializer.register_structure(self, self.extends_class)</pre>
<pre class="line after"><span class="ws">        </span>if class_type == 'origin':</pre>
<pre class="line after"><span class="ws">            </span>return response</pre>
<pre class="line after"><span class="ws">        </span>if class_type == 'basic':</pre>
<pre class="line after"><span class="ws">            </span>return jsonify({&quot;data&quot;: response})</pre>
<pre class="line after"><span class="ws">        </span>if class_type == 'sqlalchemy':</pre></div>
</div>

<li><div class="frame" id="frame-140012286608552">
  <h4>File <cite class="filename">"/app/SinglePage/serializer.py"</cite>,
      line <em class="line">25</em>,
      in <code class="function">register_structure</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>return structure</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def register_structure(self, instance, extends=None):</pre>
<pre class="line before"><span class="ws">        </span>self.structures = {}</pre>
<pre class="line before"><span class="ws">        </span>_type = type(instance)</pre>
<pre class="line current"><span class="ws">        </span>self.structures.update({_type: self.get_structure(instance)})</pre>
<pre class="line after"><span class="ws">        </span>for key, value in extends.items():</pre>
<pre class="line after"><span class="ws">            </span>self.structures[_type].update(</pre>
<pre class="line after"><span class="ws">                </span>{key: self.get_structure(value)})</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def dump(self, origin_instance, class_type='sqlalchemy'):</pre></div>
</div>

<li><div class="frame" id="frame-140012286608608">
  <h4>File <cite class="filename">"/app/SinglePage/serializer.py"</cite>,
      line <em class="line">19</em>,
      in <code class="function">get_structure</code></h4>
  <div class="source"><pre class="line before"><span class="ws">    </span>#    },</pre>
<pre class="line before"><span class="ws">    </span># }</pre>
<pre class="line before"><span class="ws">    </span>#</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def get_structure(self, instance):</pre>
<pre class="line current"><span class="ws">        </span>structure = self.dump(instance, self.class_type)</pre>
<pre class="line after"><span class="ws">        </span>return structure</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def register_structure(self, instance, extends=None):</pre>
<pre class="line after"><span class="ws">        </span>self.structures = {}</pre>
<pre class="line after"><span class="ws">        </span>_type = type(instance)</pre></div>
</div>

<li><div class="frame" id="frame-140012286608664">
  <h4>File <cite class="filename">"/app/SinglePage/serializer.py"</cite>,
      line <em class="line">38</em>,
      in <code class="function">dump</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>if self.class_type == 'sqlalchemy':</pre>
<pre class="line before"><span class="ws">            </span>if isinstance(origin_instance, Query):</pre>
<pre class="line before"><span class="ws">                </span>origin_instance = origin_instance.all()</pre>
<pre class="line before"><span class="ws">            </span>return self.typping(origin_instance)</pre>
<pre class="line before"><span class="ws">        </span>elif self.class_type == 'basic':</pre>
<pre class="line current"><span class="ws">            </span>return self.typping(origin_instance)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def cycling(self, instance):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if isinstance(instance, (set, list)):</pre>
<pre class="line after"><span class="ws">            </span>m_list = []</pre></div>
</div>

<li><div class="frame" id="frame-140012286608720">
  <h4>File <cite class="filename">"/app/SinglePage/serializer.py"</cite>,
      line <em class="line">70</em>,
      in <code class="function">typping</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>elif isinstance(instance, datetime):</pre>
<pre class="line before"><span class="ws">            </span>return instance</pre>
<pre class="line before"><span class="ws">        </span>elif instance is None:</pre>
<pre class="line before"><span class="ws">            </span>return None</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.typping(self.mapping(instance))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def mapping(self, instance):</pre>
<pre class="line after"><span class="ws">        </span>_type = type(instance)</pre>
<pre class="line after"><span class="ws">        </span>if self.structures.get(_type, None):</pre>
<pre class="line after"><span class="ws">            </span>return self.mapping_by_structure(instance)</pre></div>
</div>

<li><div class="frame" id="frame-140012286608776">
  <h4>File <cite class="filename">"/app/SinglePage/serializer.py"</cite>,
      line <em class="line">62</em>,
      in <code class="function">typping</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>if isinstance(instance, set):</pre>
<pre class="line before"><span class="ws">            </span>return self.cycling(instance)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(instance, list):</pre>
<pre class="line before"><span class="ws">            </span>return self.cycling(instance)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(instance, dict):</pre>
<pre class="line current"><span class="ws">            </span>return self.cycling(instance)</pre>
<pre class="line after"><span class="ws">        </span>elif isinstance(instance, (float, int, str, bytes, bool)):</pre>
<pre class="line after"><span class="ws">            </span>return instance</pre>
<pre class="line after"><span class="ws">        </span>elif isinstance(instance, datetime):</pre>
<pre class="line after"><span class="ws">            </span>return instance</pre>
<pre class="line after"><span class="ws">        </span>elif instance is None:</pre></div>
</div>

<li><div class="frame" id="frame-140012286608832">
  <h4>File <cite class="filename">"/app/SinglePage/serializer.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">cycling</code></h4>
  <div class="source"><pre class="line before"><span class="ws">                </span>m_list.append(value)</pre>
<pre class="line before"><span class="ws">            </span>return m_list</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(instance, dict):</pre>
<pre class="line before"><span class="ws">            </span>m_dict = {}</pre>
<pre class="line before"><span class="ws">            </span>for item in instance:</pre>
<pre class="line current"><span class="ws">                </span>value = self.typping(instance[item])</pre>
<pre class="line after"><span class="ws">                </span>m_dict.update({item: value})</pre>
<pre class="line after"><span class="ws">            </span>return m_dict</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def typping(self, instance):</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140012286608888">
  <h4>File <cite class="filename">"/app/SinglePage/serializer.py"</cite>,
      line <em class="line">70</em>,
      in <code class="function">typping</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>elif isinstance(instance, datetime):</pre>
<pre class="line before"><span class="ws">            </span>return instance</pre>
<pre class="line before"><span class="ws">        </span>elif instance is None:</pre>
<pre class="line before"><span class="ws">            </span>return None</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.typping(self.mapping(instance))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def mapping(self, instance):</pre>
<pre class="line after"><span class="ws">        </span>_type = type(instance)</pre>
<pre class="line after"><span class="ws">        </span>if self.structures.get(_type, None):</pre>
<pre class="line after"><span class="ws">            </span>return self.mapping_by_structure(instance)</pre></div>
</div>

<li><div class="frame" id="frame-140012286608944">
  <h4>File <cite class="filename">"/app/SinglePage/serializer.py"</cite>,
      line <em class="line">77</em>,
      in <code class="function">mapping</code></h4>
  <div class="source"><pre class="line before"><span class="ws">    </span>def mapping(self, instance):</pre>
<pre class="line before"><span class="ws">        </span>_type = type(instance)</pre>
<pre class="line before"><span class="ws">        </span>if self.structures.get(_type, None):</pre>
<pre class="line before"><span class="ws">            </span>return self.mapping_by_structure(instance)</pre>
<pre class="line before"><span class="ws">        </span>if self.class_type == 'basic':</pre>
<pre class="line current"><span class="ws">            </span>return self.attr_dict_from_basic(instance)</pre>
<pre class="line after"><span class="ws">        </span>elif self.class_type == 'sqlalchemy':</pre>
<pre class="line after"><span class="ws">            </span>return self.attr_dict_from_sqlalchemy(instance)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def mapping_by_structure(self, origin_instance):</pre>
<pre class="line after"><span class="ws">        </span>_type = type(origin_instance)</pre></div>
</div>

<li><div class="frame" id="frame-140012286609000">
  <h4>File <cite class="filename">"/app/SinglePage/serializer.py"</cite>,
      line <em class="line">101</em>,
      in <code class="function">attr_dict_from_basic</code></h4>
  <div class="source"><pre class="line before"><span class="ws">    </span>def attr_dict_from_basic(self, instance):</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>exclude = [e for e in instance.__exclude__]</pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line before"><span class="ws">            </span>exclude = []</pre>
<pre class="line current"><span class="ws">        </span>full = dict([[e, getattr(instance, e)] for e in dir(instance)</pre>
<pre class="line after"><span class="ws">                     </span>if not e.startswith('_') and not hasattr(</pre>
<pre class="line after"><span class="ws">                         </span>getattr(instance, e), '__call__') and e not in exclude])</pre>
<pre class="line after"><span class="ws">        </span>propery = dict([[p, getattr(instance, e).__get__(instance, type(instance))]</pre>
<pre class="line after"><span class="ws">                        </span>for p in full if hasattr(full[p], 'fset')])</pre>
<pre class="line after"><span class="ws">        </span>full.update(propery)</pre></div>
</div>

<li><div class="frame" id="frame-140012286609056">
  <h4>File <cite class="filename">"/app/SinglePage/serializer.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">&lt;listcomp&gt;</code></h4>
  <div class="source"><pre class="line before"><span class="ws">            </span>exclude = [e for e in instance.__exclude__]</pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line before"><span class="ws">            </span>exclude = []</pre>
<pre class="line before"><span class="ws">        </span>full = dict([[e, getattr(instance, e)] for e in dir(instance)</pre>
<pre class="line before"><span class="ws">                     </span>if not e.startswith('_') and not hasattr(</pre>
<pre class="line current"><span class="ws">                         </span>getattr(instance, e), '__call__') and e not in exclude])</pre>
<pre class="line after"><span class="ws">        </span>propery = dict([[p, getattr(instance, e).__get__(instance, type(instance))]</pre>
<pre class="line after"><span class="ws">                        </span>for p in full if hasattr(full[p], 'fset')])</pre>
<pre class="line after"><span class="ws">        </span>full.update(propery)</pre>
<pre class="line after"><span class="ws">        </span>return full</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140012286609112">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">quote</code></h4>
  <div class="source"><pre class="line current"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140012286585040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.5/site-packages/sqlalchemy/util/deprecations.py"</cite>,
      line <em class="line">106</em>,
      in <code class="function">warned</code></h4>
  <div class="source"><pre class="line before"><span class="ws">    </span>message = _sanitize_restructured_text(message)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@decorator</pre>
<pre class="line before"><span class="ws">    </span>def warned(fn, *args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>warnings.warn(message, wtype, stacklevel=3)</pre>
<pre class="line current"><span class="ws">        </span>return fn(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>doc = func.__doc__ is not None and func.__doc__ or ''</pre>
<pre class="line after"><span class="ws">    </span>if docstring_header is not None:</pre>
<pre class="line after"><span class="ws">        </span>docstring_header %= dict(func=func.__name__)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140012286585544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.5/site-packages/sqlalchemy/sql/schema.py"</cite>,
      line <em class="line">90</em>,
      in <code class="function">quote</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>to this schema object, for those schema items which</pre>
<pre class="line before"><span class="ws">        </span>have a ``name`` field.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self.name.quote</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@util.memoized_property</pre>
<pre class="line after"><span class="ws">    </span>def info(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Info dictionary associated with the object, allowing user-defined</pre>
<pre class="line after"><span class="ws">        </span>data to be associated with this :class:`.SchemaItem`.</pre></div>
</div>
</ul>
  <blockquote>AttributeError: 'MetaData' object has no attribute 'name'</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 2000, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1991, in wsgi_app
    response = self.make_response(self.handle_exception(e))
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1567, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python3.5/site-packages/flask/_compat.py", line 33, in reraise
    raise value
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1988, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1641, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1544, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python3.5/site-packages/flask/_compat.py", line 33, in reraise
    raise value
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1639, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1625, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/usr/local/lib/python3.5/site-packages/flask/views.py", line 84, in view
    return self.dispatch_request(*args, **kwargs)
  File "/app/SinglePage/singlepage.py", line 116, in dispatch_request
    return self.json_response(response, class_type)
  File "/app/SinglePage/singlepage.py", line 76, in json_response
    serializer.register_structure(self, self.extends_class)
  File "/app/SinglePage/serializer.py", line 25, in register_structure
    self.structures.update({_type: self.get_structure(instance)})
  File "/app/SinglePage/serializer.py", line 19, in get_structure
    structure = self.dump(instance, self.class_type)
  File "/app/SinglePage/serializer.py", line 38, in dump
    return self.typping(origin_instance)
  File "/app/SinglePage/serializer.py", line 70, in typping
    return self.typping(self.mapping(instance))
  File "/app/SinglePage/serializer.py", line 62, in typping
    return self.cycling(instance)
  File "/app/SinglePage/serializer.py", line 51, in cycling
    value = self.typping(instance[item])
  File "/app/SinglePage/serializer.py", line 70, in typping
    return self.typping(self.mapping(instance))
  File "/app/SinglePage/serializer.py", line 77, in mapping
    return self.attr_dict_from_basic(instance)
  File "/app/SinglePage/serializer.py", line 101, in attr_dict_from_basic
    full = dict([[e, getattr(instance, e)] for e in dir(instance)
  File "/app/SinglePage/serializer.py", line 103, in <listcomp>
    getattr(instance, e), '__call__') and e not in exclude])
  File "<string>", line 2, in quote
    
  File "/usr/local/lib/python3.5/site-packages/sqlalchemy/util/deprecations.py", line 106, in warned
    return fn(*args, **kwargs)
  File "/usr/local/lib/python3.5/site-packages/sqlalchemy/sql/schema.py", line 90, in quote
    return self.name.quote
AttributeError: 'MetaData' object has no attribute 'name'</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 2000, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1991, in wsgi_app
    response = self.make_response(self.handle_exception(e))
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1567, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python3.5/site-packages/flask/_compat.py", line 33, in reraise
    raise value
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1988, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1641, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1544, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python3.5/site-packages/flask/_compat.py", line 33, in reraise
    raise value
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1639, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.5/site-packages/flask/app.py", line 1625, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/usr/local/lib/python3.5/site-packages/flask/views.py", line 84, in view
    return self.dispatch_request(*args, **kwargs)
  File "/app/SinglePage/singlepage.py", line 116, in dispatch_request
    return self.json_response(response, class_type)
  File "/app/SinglePage/singlepage.py", line 76, in json_response
    serializer.register_structure(self, self.extends_class)
  File "/app/SinglePage/serializer.py", line 25, in register_structure
    self.structures.update({_type: self.get_structure(instance)})
  File "/app/SinglePage/serializer.py", line 19, in get_structure
    structure = self.dump(instance, self.class_type)
  File "/app/SinglePage/serializer.py", line 38, in dump
    return self.typping(origin_instance)
  File "/app/SinglePage/serializer.py", line 70, in typping
    return self.typping(self.mapping(instance))
  File "/app/SinglePage/serializer.py", line 62, in typping
    return self.cycling(instance)
  File "/app/SinglePage/serializer.py", line 51, in cycling
    value = self.typping(instance[item])
  File "/app/SinglePage/serializer.py", line 70, in typping
    return self.typping(self.mapping(instance))
  File "/app/SinglePage/serializer.py", line 77, in mapping
    return self.attr_dict_from_basic(instance)
  File "/app/SinglePage/serializer.py", line 101, in attr_dict_from_basic
    full = dict([[e, getattr(instance, e)] for e in dir(instance)
  File "/app/SinglePage/serializer.py", line 103, in <listcomp>
    getattr(instance, e), '__call__') and e not in exclude])
  File "<string>", line 2, in quote
    
  File "/usr/local/lib/python3.5/site-packages/sqlalchemy/util/deprecations.py", line 106, in warned
    return fn(*args, **kwargs)
  File "/usr/local/lib/python3.5/site-packages/sqlalchemy/sql/schema.py", line 90, in quote
    return self.name.quote
AttributeError: 'MetaData' object has no attribute 'name'

-->
